{"version":3,"sources":["components/Scoreboard/Scoreboard.styled.js","components/Scoreboard/Scoreboard.js","components/Button/Button.styled.js","components/Button/Button.js","components/TimerControl/TimerControl.js","views/Timer/Timer.styled.js","views/Timer/Timer.js","App.js","index.js"],"names":["DateContainer","styled","div","Date","span","DateGap","Scoreboard","time","seks","Math","floor","slice","mins","hours","StyledButton","button","Button","name","onClick","type","TimerControl","start","stop","reset","TimerBoard","Timer","useState","setTime","timerOn","setTimerOn","clickOn","setClickOn","firstClickTime","setFirstClickTime","twoClickTime","setTwoClickTime","useEffect","intervalId","setInterval","prevTime","clearInterval","event","currentTarget","target","now","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAEaA,EAAgBC,IAAOC,IAAV,sDAKbC,EAAOF,IAAOG,KAAV,oFAMJC,EAAUJ,IAAOG,KAAV,sG,OCXPE,EAAa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrBC,GAAQ,IAAKC,KAAKC,MAAOH,EAAO,IAAQ,KAAKI,OAAO,GACpDC,GAAQ,IAAMH,KAAKC,MAAOH,EAAO,IAAS,KAAKI,OAAO,GACtDE,GAAS,IAAKJ,KAAKC,MAAOH,EAAO,KAAW,KAAKI,OAAO,GAE9D,OACE,eAACX,EAAD,WACE,cAAC,EAAD,UAAOa,IACP,cAACR,EAAD,gBACA,cAAC,EAAD,UAAOO,IACP,cAACP,EAAD,gBACA,cAAC,EAAD,UAAOG,QCXAM,EAAeb,IAAOc,OAAV,8NCAZC,EAAS,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC7B,OACE,cAACJ,EAAD,CAAcK,KAAK,SAASD,QAASA,EAArC,SAA+CD,KCFtCG,EAAe,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAEzC,OACE,gCACE,cAAC,EAAD,CAAQN,KAAM,QAASC,QAASG,IAChC,cAAC,EAAD,CAAQJ,KAAM,OAAQC,QAASI,IAC/B,cAAC,EAAD,CAAQL,KAAM,QAASC,QAASK,QCNzBC,EAAavB,IAAOC,IAAV,+VCGVuB,EAAQ,WACnB,MAAwBC,mBAAS,GAAjC,mBAAOnB,EAAP,KAAaoB,EAAb,KACA,EAA8BD,oBAAS,GAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA4CL,mBAAS,GAArD,mBAAOM,EAAP,KAAuBC,EAAvB,KACA,EAAwCP,mBAAS,GAAjD,mBAAOQ,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACR,IAAIC,EAAa,KAWjB,OATIT,EACFS,EAAaC,aAAY,WACvBX,GAAQ,SAAAY,GAAQ,OAAIA,EAAW,SAC9B,KAGHC,cAAcH,GAGT,kBAAMG,cAAcH,MAC1B,CAACT,IAmCJ,OACE,eAACJ,EAAD,CAAYN,QApBI,SAACuB,GACbA,EAAMC,gBAAkBD,EAAME,UAChB,IAAZb,IAAiC,IAAZF,IACvBK,EAAkB9B,KAAKyC,KACvBb,GAAW,KAGG,IAAZD,IAAgC,IAAZF,IACtBO,EAAgBhC,KAAKyC,KACrBb,GAAW,GAENC,EAAiBE,GAAiB,KACrCL,GAAW,MAQjB,UACE,cAAC,EAAD,CAAYtB,KAAMA,IAClB,cAAC,EAAD,CAAcc,MApCC,WACjBQ,GAAW,IAmCwBP,KAhCnB,WAChBO,GAAW,GACXF,EAAQ,IA8B4CJ,MA3BnC,WACjBM,GAAW,GACXF,EAAQ,UCpCCkB,EAAM,kBAAM,cAAC,EAAD,KCGzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9c388aaa.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const DateContainer = styled.div`\r\n\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const Date = styled.span`\r\n  margin: 0 12px;\r\n  font-size: 66px;\r\n  color: #fff; \r\n`;\r\n\r\nexport const DateGap = styled.span`\r\n  position: relative;\r\n  top: -6px;\r\n  font-size: 66px;\r\n  color: #fff; \r\n`;\r\n\r\n","import { DateContainer, Date, DateGap } from './Scoreboard.styled';\r\n\r\nexport const Scoreboard = ({ time }) => {\r\n  const seks = (\"0\"+ Math.floor((time / 1000) % 60)).slice(-2);\r\n  const mins = (\"0\" + Math.floor((time / 60000) % 60)).slice(-2);\r\n  const hours = (\"0\"+ Math.floor((time / 3600000) % 60)).slice(-2)\r\n  \r\n  return (\r\n    <DateContainer>\r\n      <Date>{hours}</Date>\r\n      <DateGap>:</DateGap>\r\n      <Date>{mins}</Date>\r\n      <DateGap>:</DateGap>\r\n      <Date>{seks}</Date>\r\n    </DateContainer>\r\n  )\r\n}","import styled from \"@emotion/styled\";\r\n\r\nexport const StyledButton = styled.button`\r\n  margin: 0 10px;\r\n  width: 100px;\r\n  border-radius: 6px;\r\n  padding: 12px 18px;\r\n  background-color: #c29545;\r\n  color: #fff;\r\n  font-size: 18px;\r\n  border-color: #785A46;\r\n  cursor: pointer;\r\n`;","import { StyledButton } from './Button.styled';\r\n\r\nexport const Button = ({ name, onClick }) => {\r\n  return (\r\n    <StyledButton type='button' onClick={onClick}>{name}</StyledButton>\r\n  )\r\n}","import { Button } from 'components/Button/Button';\r\n\r\nexport const TimerControl = ({start, stop, reset}) => {\r\n\r\n  return (\r\n    <div>\r\n      <Button name={\"Start\"} onClick={start}/>\r\n      <Button name={\"Stop\"} onClick={stop}/>\r\n      <Button name={\"Reset\"} onClick={reset}/>\r\n    </div>\r\n  )\r\n}","import styled from '@emotion/styled';\r\n\r\nexport const TimerBoard = styled.div`\r\n  width: 600px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  border: 2px solid #c29545;\r\n  border-radius: 10px;\r\n  padding: 36px;\r\n  background-color: #323030;\r\n  cursor: pointer;\r\n`;","import { useState, useEffect } from 'react';\r\nimport { Scoreboard } from 'components/Scoreboard/Scoreboard';\r\nimport { TimerControl } from 'components/TimerControl/TimerControl';\r\nimport { TimerBoard } from './Timer.styled';\r\n\r\nexport const Timer = () => {\r\n  const [time, setTime] = useState(0);\r\n  const [timerOn, setTimerOn] = useState(false);\r\n  const [clickOn, setClickOn] = useState(false);\r\n  const [firstClickTime, setFirstClickTime] = useState(0);\r\n  const [twoClickTime, setTwoClickTime] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let intervalId = null;\r\n\r\n    if (timerOn) {\r\n      intervalId = setInterval(() => {\r\n        setTime(prevTime => prevTime + 1000)\r\n      }, 1000)\r\n    }\r\n    else {\r\n      clearInterval(intervalId);\r\n    }\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [timerOn]);\r\n\r\n  const startTimer = () => {\r\n    setTimerOn(true);\r\n  }\r\n\r\n  const stopTimer = () => {\r\n    setTimerOn(false);\r\n    setTime(0);\r\n  }\r\n\r\n  const resetTimer = () => {\r\n    setTimerOn(true);\r\n    setTime(0);\r\n  }\r\n\r\n  const waitTimer = (event) => {\r\n    if (event.currentTarget === event.target) {\r\n      if (clickOn === false && timerOn === true) {\r\n        setFirstClickTime(Date.now);\r\n        setClickOn(true);\r\n      }\r\n\r\n      if (clickOn === true && timerOn === true) {\r\n        setTwoClickTime(Date.now);\r\n        setClickOn(false);\r\n\r\n        if ((firstClickTime - twoClickTime) <= 300) {\r\n          setTimerOn(false);\r\n        } \r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <TimerBoard onClick={waitTimer}>\r\n      <Scoreboard time={time}/>\r\n      <TimerControl start={startTimer} stop={stopTimer} reset={resetTimer}/>\r\n    </TimerBoard>\r\n  )\r\n}","import { Timer } from './views/Timer/Timer';\n\nexport const App = () => <Timer />;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}